===
Single argument
===
print name
---
(source_file (call
	fn: (word)
	input: (group (word))))

===
Multiple arguments
===
sum a b c
---
(source_file (call
	fn: (word)
	input: (group (word) (word) (word))))

===
No-space call
===
sum(a; b; c)
---
(source_file (call
	fn: (word)
	input: (group (word) (word) (word))))

===
^- Inside of space call
===
sum sum(a; b) c
---
(source_file (call
	fn: (word)
	input: (group
      (call
        fn: (word)
        input: (group (word) (word)))
      (word))))

===
^- Non-nested call ambiguity
===
sum sum (a; b) c
---
(source_file (call
	fn: (word)
	input: (group
      (word)
      (group (word) (word))
      (word))))

===
^- Rescursive call
===
bake(cherry)(slice)
---
(source_file (call
	fn: (call
		fn: (word)
		input: (group (word)))
	input: (group (word))))

===
Literal call
===
user:name
---
(source_file (call
	fn: (word)
	input: (literal)))

===
^- Regular call ambiguity
===
user account :name
---
(source_file (call
	fn: (word)
	input: (group (word) (literal))))

===
Infix call
===
a < b
---
(source_file (call
	left: (word)
	fn: (symbol)
	right: (word)))

===
^- & binding
===
c: a + b
---
(source_file (binding
	id: (word)
	value: (call
		left: (word)
		fn: (symbol)
		right: (word))))

===
^- & comma-group
===
a + b, c + d
---
(source_file (group
	(call
		left: (word)
		fn: (symbol)
		right: (word))
	(call
		left: (word)
		fn: (symbol)
		right: (word))))

===
^- & call
===
f a + g b
---
(source_file (call
	left: (call fn: (word) input: (group (word)))
	fn: (symbol)
	right: (call fn: (word) input: (group (word)))))
